AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  dc-api-v2

  SAM Template for dc-api-v2
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    CodeUri: ./node/src
    Runtime: nodejs16.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 3
    Environment:
      Variables:
        API_TOKEN_NAME: !Ref ApiTokenName
        API_TOKEN_SECRET: !Ref ApiTokenSecret
        DC_API_ENDPOINT: !Ref DcApiEndpoint
        DC_URL: !Ref DcUrl
        ELASTICSEARCH_ENDPOINT: !Ref ElasticsearchEndpoint
        ENV_PREFIX: !Ref EnvironmentPrefix
        HONEYBADGER_API_KEY: !Ref HoneybadgerApiKey
        HONEYBADGER_ENV: !Ref HoneybadgerEnv
        HONEYBADGER_REVISION: !Ref HoneybadgerRevision
        READING_ROOM_IPS: !Ref ReadingRoomIPs
Parameters:
  ApiTokenName:
    Type: String
    Description: Name of the jwt that DC API issues
  ApiTokenSecret:
    Type: String
    Description: Secret Key for Encrypting JWTs (must match IIIF server)
  CustomDomainCertificateArn:
    Type: String
    Description: SSL Certificate for the Custom Domain Name
  CustomDomainZone:
    Type: String
    Description: Hosted Zone Name for Custom Domain
  CustomDomainHost:
    Type: String
    Description: Hostname within ApiDomainName for Custom Domain
  DcApiEndpoint:
    Type: String
    Description: URL for DC API
  DcUrl:
    Type: String
    Description: URL of Digital Collections website
  ElasticsearchEndpoint:
    Type: String
    Description: Elasticsearch url
  EnvironmentPrefix:
    Type: String
    Description: Index Prefix
    Default: ""
  HoneybadgerApiKey:
    Type: String
    Description: Honeybadger API Key
    Default: ""
  HoneybadgerEnv:
    Type: String
    Description: Honeybadger Environment
    Default: ""
  HoneybadgerRevision:
    Type: String
    Description: Honeybadger Revision
    Default: ""
  MediaConvertDestinationBucket: 
    Type: String
    Description: S3 bucket destination for transcoded AV resource
    Default: ""
  MediaConvertEndpoint: 
    Type: String
    Description: MediaConvert endpoint
    Default: ""
  MediaConvertJobQueueArn: 
    Type: String
    Description: Job Queue ARN for MediaConvert
    Default: ""
  MediaConvertRoleArn: 
    Type: String
    Description: MediaConvert role ARN
    Default: ""
  NussoApiKey:
    Type: String
    Description: API key for auth server
  NussoBaseUrl:
    Type: String
    Description: Auth server URL
  ReadingRoomIPs:
    Type: String
    Description: Comma-delimited list of IP addresses to serve private resources to
  RepositoryEmail:
    Type: String
    Description: Verified email address to use as sender
  StreamingBucket:
    Type: String
    Description: Meadow streaming bucket
Resources:
  apiDependencies:
    Type: AWS::Serverless::LayerVersion
    Properties: 
      LayerName: !Sub "${AWS::StackName}-api-dependencies"
      Description: Dependencies for API handlers
      ContentUri: ./layers/api_dependencies
      CompatibleRuntimes:
        - nodejs16.x
      LicenseInfo: Apache-2.0
    Metadata:
      BuildMethod: nodejs16.x
  # V2 API
  getAuthCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-callback.handler
      Description: NUSSO callback function.
      Layers: 
        - !Ref apiDependencies
      Environment:
        Variables:
          NUSSO_API_KEY: !Ref NussoApiKey
          NUSSO_BASE_URL: !Ref NussoBaseUrl
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/callback
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/callback
            Method: HEAD
  getAuthLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-login.handler
      Description: Performs NUSSO login.
      Layers: 
        - !Ref apiDependencies
      Environment:
        Variables:
          NUSSO_API_KEY: !Ref NussoApiKey
          NUSSO_BASE_URL: !Ref NussoBaseUrl
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/login
            Method: GET
  getAuthLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-logout.handler
      Description: Performs NUSSO logout.
      Layers: 
        - !Ref apiDependencies
      Environment:
        Variables:
          NUSSO_API_KEY: !Ref NussoApiKey
          NUSSO_BASE_URL: !Ref NussoBaseUrl
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/logout
            Method: GET
  getAuthWhoAmIFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-whoami.handler
      Description: Exchanges valid JWT token for user information.
      Layers: 
        - !Ref apiDependencies
      Environment:
        Variables:
          NUSSO_API_KEY: !Ref NussoApiKey
          NUSSO_BASE_URL: !Ref NussoBaseUrl
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/whoami
            Method: GET
  getCollectionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-collections.handler
      Description: Gets Collections.
      Layers: 
        - !Ref apiDependencies
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections
            Method: HEAD
  getCollectionByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-collection-by-id.handler
      Description: Gets a Collection by id.
      Layers: 
        - !Ref apiDependencies
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections/{id}
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections/{id}
            Method: HEAD
  getFileSetByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-file-set-by-id.handler
      Description: Gets a FileSet by id.
      Layers: 
        - !Ref apiDependencies
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}
            Method: HEAD
  getFileSetAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-file-set-auth.handler
      Description: Authorizes access to a file set.
      Layers: 
        - !Ref apiDependencies
      Environment:
        Variables:
          USE_PROXIED_IP: true
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}/authorization
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}/authorization
            Method: HEAD
  getFileSetDownloadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-file-set-download.handler
      Description: Downloads a file set.
      Layers: 
        - !Ref apiDependencies
      Environment:
        Variables:
          STEP_FUNCTION_ENDPOINT: !Ref AWS::NoValue
          AV_DOWNLOAD_STATE_MACHINE_ARN: !Ref avDownloadStateMachine
          AV_DOWNLOAD_EMAIL_TEMPLATE: !Ref avDownloadEmailTemplate
          USE_PROXIED_IP: true
          STREAMING_BUCKET: !Ref StreamingBucket
          MEDIA_CONVERT_DESTINATION_BUCKET: !Ref MediaConvertDestinationBucket
          MEDIA_CONVERT_ENDPOINT: !Ref MediaConvertEndpoint
          MEDIA_CONVERT_JOB_QUEUE_ARN: !Ref MediaConvertJobQueueArn
          MEDIA_CONVERT_ROLE_ARN: !Ref MediaConvertRoleArn
          REPOSITORY_EMAIL: !Ref RepositoryEmail
          START_TRANSCODE_FUNCTION: !GetAtt startTranscodeFunction.Arn
          TRANSCODE_STATUS_FUNCTION: !GetAtt transcodeStatusFunction.Arn
          GET_DOWNLOAD_LINK_FUNCTION: !GetAtt getDownloadLinkFunction.Arn
          SEND_TEMPLATED_EMAIL_FUNCTION: !GetAtt sendTemplatedEmailFunction.Arn
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
          - Sid: ExecuteAVDownloadStepFunction
            Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Ref avDownloadStateMachine
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}/download
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}/download
            Method: HEAD
  getWorkAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-work-auth.handler
      Description: Authorizes access to a work.
      Layers: 
        - !Ref apiDependencies
      Environment:
        Variables:
          USE_PROXIED_IP: true
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/authorization
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/authorization
            Method: HEAD
  getWorkByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-work-by-id.handler
      Description: Gets a Work by id.
      Layers: 
        - !Ref apiDependencies
      Environment:
        Variables:
          USE_PROXIED_IP: true
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}
            Method: HEAD
  getThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-thumbnail.handler
      Description: Gets a Work's representative thumbnail.
      Layers: 
        - !Ref apiDependencies
      Timeout: 10
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        CollectionApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections/{id}/thumbnail
            Method: GET
        CollectionApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections/{id}/thumbnail
            Method: HEAD
        WorkApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/thumbnail
            Method: GET
        WorkApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/thumbnail
            Method: HEAD
  getSimilarFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-similar.handler
      Timeout: 100
      Description: Gets works similar to a specific work.
      Layers: 
        - !Ref apiDependencies
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        WorkApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/similar
            Method: GET
        WorkApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/similar
            Method: HEAD
  searchPostFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/search.postSearch
      Description: Handles OpenSearch search requests, Works only by default.
      Layers: 
        - !Ref apiDependencies
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        SearchApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search
            Method: POST
        SearchWithModelsApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search/{models}
            Method: POST
  searchGetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/search.getSearch
      Description: Handles paging requests
      Layers: 
        - !Ref apiDependencies
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        SearchApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search
            Method: GET
        SearchApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search
            Method: HEAD
        SearchWithModelsApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search/{models}
            Method: GET
        SearchWithModelsApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search/{models}
            Method: HEAD
  optionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/options-request.handler
      Timeout: 3
      Description: Handles all OPTIONS requests
      Layers: 
        - !Ref apiDependencies
      Events:
        Everything:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /{proxy+}
            Method: OPTIONS
  getSharedLinkByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-shared-link-by-id.handler
      Description: Gets a shared link document by id.
      Layers: 
        - !Ref apiDependencies
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /shared-links/{id}
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /shared-links/{id}
            Method: HEAD
  oaiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/oai.handler
      Description: Transforms works into OAI Records.
      Layers: 
        - !Ref apiDependencies
      Timeout: 60
      Policies:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
      Events:
        GetApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /oai
            Method: GET
        GetApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /oai
            Method: HEAD
        PostApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /oai
            Method: POST
  helloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./python/src
      Runtime: python3.9
      Handler: handlers/hello.lambda_handler
      Environment:
        Variables:
          DEFAULT_NAME: "World"
      Events:
        GetApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /hello
            Method: GET
  defaultFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/default-request.handler
      Timeout: 3
      Description: Handles all other requests
      Layers: 
        - !Ref apiDependencies
      Events:
        Everything:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: $default
            Method: ANY

  # Resources for AV Download state machine
  avDownloadStateMachine: 
    Type: AWS::Serverless::StateMachine
    Properties: 
      DefinitionUri: ./state_machines/av_download.json
      Name: !Sub "${AWS::StackName}-av-download-state-machine"
      Policies: 
        Version: 2012-10-17
        Statement:
          - Sid: LambaInvokePermissions
            Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: 
              - !GetAtt startTranscodeFunction.Arn
              - !GetAtt transcodeStatusFunction.Arn
              - !GetAtt getDownloadLinkFunction.Arn
              - !GetAtt sendTemplatedEmailFunction.Arn
  avDownloadEmailTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: !Sub "${AWS::StackName}-av-download-template"
        SubjectPart: Your {{fileType}} download from Meadow is ready
        TextPart: |
          Hello,
          Your request for {{fileType}} download of {{fileSetLabel}} (file set id: {{fileSetId}}) has been fulfilled. Your download will be available for 24 hours.
          The {{fileType}} file can be downloaded from {{downloadLink}}
        HtmlPart: |
          <!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
          <html xmlns='http://www.w3.org/1999/xhtml'>
            <head>
              <meta http-equiv='Content-Type' content='text/html; charset=utf-8' />
              <title>NUL Meadow Download</title>
              <meta content='IE=edge' http-equiv='X-UA-Compatible' />
              <style>
                p {
                  margin-top: 0;
                  line-height: 1.4em;
                }
                a {
                  color: #4e2a84;
                }
                @media only screen and (max-width: 599px) {
                  table[class='body-table'] {
                    width: 100%;
                  }
                  img {
                    max-width: 100%;
                    height: auto !important;
                  }
                }
                @media only screen and (max-width: 510px) {
                  table[class='inside-table'] {
                    width: 100%;
                    padding: 0 10px 0 10px !important;
                  }
                  table[class='quote-table'] {
                    width: 100%;
                  }
                  table[class='quote-image-table'] {
                    width: 100%;
                  }
                }
              </style>
            </head>

            <body
              style='
                background-color: #f1f0f0;
                padding: 0;
                margin: 0;
                font-family: Arial, Helvetica Neue, Helvetica, sans-serif;
                font-size: 17px;
                color: #342f2e;
              '
            >
              <!--[if gte mso 15]><table border='0' cellpadding='0' cellspacing='0' width='100%' align='left'><tr><td><![endif]-->
              <table
                align='center'
                border='0'
                cellpadding='0'
                cellspacing='0'
                class='body-table'
                style='border: 1px solid #d8d6d6; background-color: #ffffff'
                width='600'
              >
                <!-- header -->
                <tbody>
                  <tr>
                    <td>
                      <table
                        border='0'
                        cellpadding='0'
                        cellspacing='0'
                        style='margin-bottom: 40px'
                        width='100%'
                      >
                        <tbody>
                          <tr>
                            <td
                              align='center'
                              height='110'
                              style='background-color: #4e2a84; padding: 0 10px 0 10px'
                              valign='middle'
                            >
                              <h1>
                                <img src="https://nul-public.s3.amazonaws.com/work-archiver/northwestern_logo.png" alt="Northwestern University Logo" />
                              </h1>
                            </td>
                          </tr>
                          <tr>
                            <td
                              align='center'
                              height='40'
                              style='
                                background-color: #401f68;
                                font-size: 13px;
                                color: #ffffff;
                                font-style: italic;
                              '
                              valign='middle'
                            ></td>
                          </tr>
                        </tbody>
                      </table>
                    </td>
                  </tr>
                  <tr>
                    <td>
                      <table
                        align='center'
                        border='0'
                        cellpadding='0'
                        cellspacing='0'
                        class='inside-table'
                        style='margin-bottom: 40px; padding: 0 66px 0 66px'
                        width='100%'
                      >
                        <tbody>
                          <tr>
                            <td style='padding-bottom: 5px'>
                              <h2
                                style='
                                  margin: 12px 0;
                                  font-size: 32px;
                                  line-height: 1.2em;
                                '
                              >
                                Hello,
                              </h2>
                              <p>
                                Your request for {{fileType}} download of <b>{{fileSetLabel}}</b> (file set id: {{fileSetId}}) has been
                                fulfilled. Click below to download your file:
                              </p>
                              <p style='text-align: center'>
                                <a href='{{downloadLink}}'>
                                  <!-- icon licensed under Creative Commons (Attribution 3.0 Unported): https://www.iconfinder.com/icons/285629/zip_file_icon -->
                                  <img src="https://iiif.dc.library.northwestern.edu/iiif/2/00000000-0000-0000-0000-000000000002/square/100,100/0/default.jpg" alt="{{downloadLink}}" />
                                </a>
                              </p>
                              <p style='text-align: center; font-style: italic'>
                                (Your <a href='{{downloadLink}}'>download</a> will be available for 24 hours)
                              </p>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </td>
                  </tr>
                  <!-- footer -->
                  <tr>
                    <td>
                      <table
                        align='center'
                        border='0'
                        cellpadding='0'
                        cellspacing='0'
                        style='background-color: #4e2a84; padding: 20px 0 20px 0'
                        width='100%'
                      >
                        <tbody>
                          <tr>
                            <td align='center' style='padding-bottom: 10px'>
                              <p>
                                <a href='https://www.library.northwestern.edu'
                                  ><img
                                    alt='Northwestern University Library'
                                    src='https://nul-public.s3.amazonaws.com/work-archiver/northwestern-university.png'
                                /></a>
                              </p>
                            </td>
                          </tr>
                          <tr>
                            <td align='center' style='padding-bottom: 20px'>
                              <p style='font-size: 12px; font-weight: bold; margin: 0'>
                                <a
                                  href='https://meadow.library.northwestern.edu'
                                  style='color: #ffffff'
                                  >VISIT MEADOW NOW</a
                                >
                              </p>
                            </td>
                          </tr>
                        </tbody>
                      </table>
                    </td>
                  </tr>
                </tbody>
              </table>
              <!--[if gte mso 15]></td></tr></table><![endif]-->
            </body>
          </html>
  startTranscodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs18.x
      CodeUri: ./lambdas
      Handler: start-transcode.handler
      Description: Creates MediaConvert Job to transcode HLS stream
      Environment:
        Variables:
          MEDIA_CONVERT_ENDPOINT: !Ref MediaConvertEndpoint
          MEDIA_CONVERT_JOB_QUEUE_ARN: !Ref MediaConvertJobQueueArn
          MEDIA_CONVERT_ROLE_ARN: !Ref MediaConvertRoleArn
      Policies: 
        Version: 2012-10-17
        Statement:
          - Sid: PassMediaConvertRole
            Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !Ref MediaConvertRoleArn
          - Sid: StartTranscodeJob
            Effect: Allow
            Action:
              - mediaconvert:CreateJob
            Resource: "*"
  transcodeStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs18.x
      CodeUri: ./lambdas
      Handler: transcode-status.handler
      Description: Determines when transcode job has completed or errored
      Environment:
        Variables:
          MEDIA_CONVERT_ENDPOINT: !Ref MediaConvertEndpoint
      Policies: 
        Version: 2012-10-17
        Statement:
          - Sid: TranscodeJobStatus
            Effect: Allow
            Action:
              - mediaconvert:GetJob
              - mediaconvert:ListJobs
            Resource: "*"
  getDownloadLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs18.x
      CodeUri: ./lambdas
      Handler: get-download-link.handler
      Description: Creates presigned url
      Policies: 
        Version: 2012-10-17
        Statement:
          - Sid: BucketAccess
            Effect: Allow
            Action:
              - s3:GetObject
            Resource: "*"
  sendTemplatedEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs18.x
      CodeUri: ./lambdas
      Handler: send-templated-email.handler
      Description: Sends email
      Policies: 
        Version: 2012-10-17
        Statement:
          - Sid: SESSendEmail
            Effect: Allow
            Action:
              - ses:SendTemplatedEmail
            Resource: "*"

  # API Gateway Resources
  dcApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v2
      StageVariables:
        basePath: api/v2
      Domain:
        DomainName: !Sub "${CustomDomainHost}.${CustomDomainZone}"
        BasePath: api/v2
        CertificateArn: !Ref CustomDomainCertificateArn
        Route53:
          HostedZoneName: !Sub "${CustomDomainZone}."

  # root API
  rootApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: latest
  # rootRedirect:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ./redirect
  #     Handler: index.handler
  #     Timeout: 1
  #     Description: Redirects to latest version of docs
  #     Environment:
  #       Variables:
  #         REDIRECT_TO: /docs/v2/index.html
  #     Events:
  #       RedirectApiGet:
  #         Type: HttpApi
  #         Properties:
  #           ApiId: !Ref rootApi
  #           Path: /
  #           Method: GET
  #       RedirectApiHead:
  #         Type: HttpApi
  #         Properties:
  #           ApiId: !Ref rootApi
  #           Path: /
  #           Method: HEAD

  # Documentation
  # docsMapping:
  #   Type: AWS::ApiGatewayV2::ApiMapping
  #   Properties:
  #     DomainName: !Sub "${CustomDomainHost}.${CustomDomainZone}"
  #     ApiId: !Ref rootApi
  #     Stage: !Ref rootApilatestStage
  #   DependsOn: dcApi
  # docsBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub "${CustomDomainHost}-docs.${CustomDomainZone}"
  #     AccessControl: PublicRead
  #     WebsiteConfiguration:
  #       IndexDocument: index.html
  #       ErrorDocument: index.html
  # docsBucketPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     PolicyDocument:
  #       Id: MyPolicy
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: PublicReadForGetBucketObjects
  #           Effect: Allow
  #           Principal: "*"
  #           Action: "s3:GetObject"
  #           Resource: !Sub "arn:aws:s3:::${docsBucket}/*"
  #     Bucket: !Ref docsBucket
  # docsIntegration:
  #   Type: AWS::ApiGatewayV2::Integration
  #   Properties:
  #     ApiId: !Ref rootApi
  #     IntegrationMethod: GET
  #     IntegrationType: HTTP_PROXY
  #     IntegrationUri: !Sub "http://${docsBucket}.s3-website-us-east-1.amazonaws.com/{proxy}"
  #     PayloadFormatVersion: "1.0"
  # docsRoute:
  #   Type: AWS::ApiGatewayV2::Route
  #   Properties:
  #     ApiId: !Ref rootApi
  #     AuthorizationType: NONE
  #     RouteKey: GET /docs/v2/{proxy+}
  #     Target: !Sub "integrations/${docsIntegration}"
