# Build and Deploy Template for DC API
#
# Note: Any comment starting with `#*` will be removed
# at build time. This allows us to run without the
# dependency layer in development without removing the
# layer from the build.

AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::LanguageExtensions
Description: dc-api-v2 API
Globals:
  Function:
    CodeUri: ./src
    Runtime: nodejs22.x
    Architectures:
      - x86_64
    MemorySize: 128
    Timeout: 10
    Environment:
      Variables:
        API_CONFIG_PREFIX: !Ref ApiConfigPrefix
        API_TOKEN_NAME: !Ref ApiTokenName
        DC_API_ENDPOINT: !Ref DcApiEndpoint
        DC_URL: !Ref DcUrl
        DEFAULT_SEARCH_SIZE: "100"
        DEV_TEAM_NET_IDS: !Ref DevTeamNetIds
        ENV_PREFIX: !Ref EnvironmentPrefix
        HONEYBADGER_API_KEY: !Ref HoneybadgerApiKey
        HONEYBADGER_ENV: !Ref HoneybadgerEnv
        HONEYBADGER_REVISION: !Ref HoneybadgerRevision
        READING_ROOM_IPS: !Ref ReadingRoomIPs
        SECRETS_PATH: !Ref SecretsPath
Parameters:
  ApiConfigPrefix:
    Type: String
    Description: Secret Name for API Configuration (if not provided, will use SecretsPath)
    Default: ""
  ApiTokenName:
    Type: String
    Description: Name of the jwt that DC API issues
  ApiTokenSecret:
    Type: String
    Description: Secret Key for Encrypting JWTs (must match IIIF server)
  ChatWebSocketURI:
    Type: String
    Description: URI of the chat websocket API
    Default: ""
  CustomDomainCertificateArn:
    Type: String
    Description: SSL Certificate for the Custom Domain Name
  CustomDomainZone:
    Type: String
    Description: Hosted Zone Name for Custom Domain
  CustomDomainHost:
    Type: String
    Description: Hostname within ApiDomainName for Custom Domain
  DcApiEndpoint:
    Type: String
    Description: URL for DC API
  DcUrl:
    Type: String
    Description: URL of Digital Collections website
  DeployAPI:
    Type: String
    Description: Whether to deploy all the API functions or only the ones required for other stacks
  DeployAVDownload:
    Type: String
    Description: Set to true to deploy AVDownload
  DeployChat:
    Type: String
    Description: Set to true to deploy Chat
  DevTeamNetIds:
    Type: String
    Description: Northwestern NetIDs of the development team
  EnvironmentPrefix:
    Type: String
    Description: Index Prefix
    Default: ""
  HoneybadgerApiKey:
    Type: String
    Description: Honeybadger API Key
    Default: ""
  HoneybadgerEnv:
    Type: String
    Description: Honeybadger Environment
    Default: ""
  HoneybadgerRevision:
    Type: String
    Description: Honeybadger Revision
    Default: ""
  PyramidBucket:
    Type: String
    Description: Meadow Pyramid Bucket
  ReadingRoomIPs:
    Type: String
    Description: Comma-delimited list of IP addresses to serve private resources to
  SecretsPath:
    Type: String
    Description: Prefix to use when loading configs from Secrets Manager
  SecretsPolicy:
    Type: String
    Description: Policy that allows reading of required secrets
  WriteConfigSecret:
    Type: String
    Description: Set to something other than "true" to _not_ write configuration secrets
    Default: "true"
Conditions:
  CustomConfigSecret:
    Fn::Not:
    - Fn::Equals:
      - !Ref ApiConfigPrefix
      - ""
  DeployAPI:
    Fn::Equals: [!Ref DeployAPI, "true"]
  DeployAVDownload:
    Fn::Equals: [!Ref DeployAVDownload, "true"]
  DeployChat:
    Fn::Equals: [!Ref DeployChat, "true"]
  WriteSecret:
    Fn::Equals:
    - !Ref WriteConfigSecret
    - true
Resources:
  #* apiDependencies:
  #*   Type: AWS::Serverless::LayerVersion
  #*   Properties:
  #*     LayerName: !Sub "${AWS::StackName}-api-dependencies"
  #*     Description: Dependencies for API handlers
  #*     ContentUri: ./dependencies
  #*     CompatibleRuntimes:
  #*       - nodejs22.x
  #*     LicenseInfo: Apache-2.0
  #*   Metadata:
  #*     BuildMethod: nodejs22.x
  # Configuration
  apiConfiguration:
    Type: AWS::SecretsManager::Secret
    Condition: WriteSecret
    Properties:
      Name: 
        Fn::If:
          - CustomConfigSecret
          - !Sub "${ApiConfigPrefix}/config/dcapi"
          - !Sub "${SecretsPath}/config/dcapi"
      SecretString:
        Fn::ToJsonString:
          api_token_secret: !Ref ApiTokenSecret
          base_url: !Sub "https://${CustomDomainHost}.${CustomDomainZone}/api/v2"
  readIndexPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ESHTTPPolicy
            Effect: Allow
            Action:
              - es:ESHttp*
            Resource: "*"
  # V2 API
  getAuthCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-callback.handler
      Description: NUSSO callback function.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/callback
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/callback
            Method: HEAD
  getAuthLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-login.handler
      Description: Performs NUSSO login.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/login
            Method: GET
  getAuthLogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-logout.handler
      Description: Performs NUSSO logout.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/logout
            Method: GET
  getAuthTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-token.handler
      Description: Function to retrieve raw JWT.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/token
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/token
            Method: HEAD
  getAuthWhoAmIFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/get-auth-whoami.handler
      Description: Exchanges valid JWT token for user information.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /auth/whoami
            Method: GET
  getCollectionsFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-collections.handler
      Description: Gets Collections.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections
            Method: HEAD
  getCollectionByIdFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-collection-by-id.handler
      Description: Gets a Collection by id.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections/{id}
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections/{id}
            Method: HEAD
  getFileSetByIdFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-file-set-by-id.handler
      Description: Gets a FileSet by id.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}
            Method: HEAD
  getFileSetAuthFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-file-set-auth.handler
      Description: Authorizes access to a file set.
      #* Layers:
      #*   - !Ref apiDependencies
      Environment:
        Variables:
          USE_PROXIED_IP: true
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}/authorization
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}/authorization
            Method: HEAD
  getFileSetDownloadFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAVDownload
    Properties:
      Handler: handlers/get-file-set-download.handler
      Description: Downloads a file set.
      #* Layers:
      #*   - !Ref apiDependencies
      Environment:
        Variables:
          AV_DOWNLOAD_EMAIL_TEMPLATE: !Ref AWS::NoValue
          AV_DOWNLOAD_STATE_MACHINE_ARN: !Ref AWS::NoValue
          GET_DOWNLOAD_LINK_FUNCTION: !Ref AWS::NoValue
          MEDIA_CONVERT_DESTINATION_BUCKET: !Ref AWS::NoValue
          MEDIA_CONVERT_ENDPOINT: !Ref AWS::NoValue
          MEDIA_CONVERT_JOB_QUEUE_ARN: !Ref AWS::NoValue
          MEDIA_CONVERT_ROLE_ARN: !Ref AWS::NoValue
          PYRAMID_BUCKET: !Ref AWS::NoValue
          REPOSITORY_EMAIL: !Ref AWS::NoValue
          SEND_TEMPLATED_EMAIL_FUNCTION: !Ref AWS::NoValue
          START_AUDIO_TRANSCODE_FUNCTION: !Ref AWS::NoValue
          START_TRANSCODE_FUNCTION: !Ref AWS::NoValue
          STEP_FUNCTION_ENDPOINT: !Ref AWS::NoValue
          STREAMING_BUCKET: !Ref AWS::NoValue
          TRANSCODE_STATUS_FUNCTION: !Ref AWS::NoValue
      Policies:
        - !Ref SecretsPolicy
        - Version: 2012-10-17
          Statement:
            - Sid: ExecuteAVDownloadStepFunction
              Effect: Allow
              Action:
                - states:StartExecution
              Resource:
                - "*"
            - Sid: BucketAccess
              Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${PyramidBucket}/*"
            - Sid: ESHTTPPolicy
              Effect: Allow
              Action:
                - es:ESHttp*
              Resource: "*"
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}/download
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /file-sets/{id}/download
            Method: HEAD
  getWorkAuthFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-work-auth.handler
      Description: Authorizes access to a work.
      #* Layers:
      #*   - !Ref apiDependencies
      Environment:
        Variables:
          USE_PROXIED_IP: true
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/authorization
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/authorization
            Method: HEAD
  getWorkByIdFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-work-by-id.handler
      Description: Gets a Work by id.
      #* Layers:
      #*   - !Ref apiDependencies
      Environment:
        Variables:
          USE_PROXIED_IP: true
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}
            Method: HEAD
  getThumbnailFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-thumbnail.handler
      Description: Gets a Work's representative thumbnail.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        CollectionApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections/{id}/thumbnail
            Method: GET
        CollectionApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /collections/{id}/thumbnail
            Method: HEAD
        WorkApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/thumbnail
            Method: GET
        WorkApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/thumbnail
            Method: HEAD
  getSimilarFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-similar.handler
      Timeout: 100
      Description: Gets works similar to a specific work.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        WorkApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/similar
            Method: GET
        WorkApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /works/{id}/similar
            Method: HEAD
  searchPostFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/search.postSearch
      Description: Handles OpenSearch search requests, Works only by default.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        SearchApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search
            Method: POST
        SearchWithModelsApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search/{models}
            Method: POST
  searchGetFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/search.getSearch
      Description: Handles paging requests
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        SearchApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search
            Method: GET
        SearchApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search
            Method: HEAD
        SearchWithModelsApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search/{models}
            Method: GET
        SearchWithModelsApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /search/{models}
            Method: HEAD
  optionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handlers/options-request.handler
      Timeout: 3
      Description: Handles all OPTIONS requests
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
      Events:
        Everything:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /{proxy+}
            Method: OPTIONS
  getSharedLinkByIdFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/get-shared-link-by-id.handler
      Description: Gets a shared link document by id.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        ApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /shared-links/{id}
            Method: GET
        ApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /shared-links/{id}
            Method: HEAD
  oaiFunction:
    Type: AWS::Serverless::Function
    Condition: DeployAPI
    Properties:
      Handler: handlers/oai.handler
      Description: Transforms works into OAI Records.
      #* Layers:
      #*   - !Ref apiDependencies
      Timeout: 60
      Policies:
        - !Ref SecretsPolicy
        - !Ref readIndexPolicy
      Events:
        GetApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /oai
            Method: GET
        GetApiHead:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /oai
            Method: HEAD
        PostApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /oai
            Method: POST
  chatWebsocketEndpoint:
    Type: AWS::Serverless::Function
    Condition: DeployChat
    Properties:
      Handler: handlers/get-chat-endpoint.handler
      Description: Returns the URI of the chat websocket API.
      #* Layers:
      #*   - !Ref apiDependencies
      Environment:
       Variables:
         WEBSOCKET_URI: !Ref ChatWebSocketURI
      Policies:
        - !Ref SecretsPolicy
      Events:
        GetApiGet:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /chat/endpoint
            Method: GET
  chatFeedback:
    Type: AWS::Serverless::Function
    Condition: DeployChat
    Properties:
      Environment:
        Variables:
          CHAT_FEEDBACK_BUCKET: !Ref chatFeedbackBucket
          CHAT_FEEDBACK_TOPIC_ARN: !Ref chatFeedbackTopic
      Handler: handlers/post-chat-feedback.handler
      Description: Handles feedback from the chat.
      #* Layers:
      #*   - !Ref apiDependencies
      Policies:
        - !Ref SecretsPolicy
        - Version: 2012-10-17
          Statement:
            - Sid: BucketAccess
              Effect: Allow
              Action:
                - s3:PutObject
              Resource: !Sub "arn:aws:s3:::${chatFeedbackBucket}/*"
            - Sid: TopicAccess
              Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref chatFeedbackTopic
      Events:
        PostApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref dcApi
            Path: /chat/feedback
            Method: POST
  chatFeedbackBucket:
    Type: 'AWS::S3::Bucket'
  chatFeedbackTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: DC Chat Feedback
      TopicName: !Sub "${AWS::StackName}-chat-feedback"
  dcApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: v2
      StageVariables:
        basePath: api/v2
  apiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      DomainName: !Sub "${CustomDomainHost}.${CustomDomainZone}"
      ApiMappingKey: api/v2
      ApiId: !Ref dcApi
      Stage: !Ref dcApiv2Stage
