name: Generate typescript and create PR into nulib/dcapi-types@main
on:
  pull_request:
    types:
      - closed
    branches:
      - "main"
    paths:
      - "docs/docs/spec/data-types.yaml"
      - ".github/flags/deploy-data-types"
  workflow_dispatch:
jobs:
  Push-To-Types-Repo-Production:
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true) || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment: production
    env:
      TARGET_BRANCH: "main"
      TMP_SRCDIR: "./source"
      TMP_DSTDIR: "./dest"
      TMP_REPODEVDIR: "./repodev"
      GH_TOKEN: ${{secrets.GH_TOKEN}}
    steps:
      - run: |
          echo PR with changes to datatypes.yml was merged into main
      - name: Checkout dc-api-v2
        uses: actions/checkout@v3
        with:
          path: "${{ env.TMP_SRCDIR }}"
          fetch-depth: 0
      - name: Find all package.json files and check if they were updated
        run: |
          # Find all package.json files in the repo
          PACKAGE_FILES=$(find . -name "package.json" -not -path "*/node_modules/*")
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)

          UNCHANGED_FILES=()
          
          # Check each package.json
          for PKG_FILE in $PACKAGE_FILES; do
            if ! echo "$CHANGED_FILES" | grep -q "$PKG_FILE"; then
              UNCHANGED_FILES+=("$PKG_FILE")
            fi
          done

          if [ ${#UNCHANGED_FILES[@]} -gt 0 ]; then
            echo "Warning: The following package.json files were not updated:"
            for FILE in "${UNCHANGED_FILES[@]}"; do
              echo "$FILE"
            done
            exit 1
          fi
      - uses: actions/setup-node@v4
        with:
          cache-dependency-path: "${{ env.TMP_SRCDIR }}/api/package-lock.json"
          node-version: 20.x
          cache: "npm"
      - name: Set short git commit SHA
        working-directory: "${{ env.TMP_SRCDIR }}"
        id: short-sha
        run: |
          echo "value=$(git rev-parse --short ${{ github.sha }})" >> $GITHUB_OUTPUT
      - name: get-api-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@main
        with:
          path: "${{ env.TMP_SRCDIR }}/api"
      - name: Generate Typescript file
        working-directory: "${{ env.TMP_SRCDIR }}/api"
        run: |
          npm ci
          npx openapi-typescript ../docs/docs/spec/data-types.yaml --output schemas.ts
      - name: Checkout nulib/dcapi-types
        uses: actions/checkout@v3
        with:
          path: ${{ env.TMP_DSTDIR }}
          ref: ${{ env.TARGET_BRANCH }}
          repository: "nulib/dcapi-types"
          token: ${{env.GH_TOKEN}}
      - run: mv -f "${{ env.TMP_SRCDIR }}/api/schemas.ts" "${{ env.TMP_DSTDIR }}/schemas.ts"
        shell: bash
      - working-directory: "${{ env.TMP_DSTDIR }}"
        run: |
          git checkout -b dcapi-${{ steps.short-sha.outputs.value }}
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "nulib/dc-api-v2 v${{ steps.package-version.outputs.current-version}} release"
          git push origin HEAD
        shell: bash
      - name: Open nulib/dcapi-types PR
        id: open-types-pr
        working-directory: "${{ env.TMP_DSTDIR }}"
        run: |
          pr=$(gh pr create --base main --title "Update types for DC API release v${{ steps.package-version.outputs.current-version}}" --body "A new version of `nulib/dc-api-v2` has been released. Please review changes and release a new version of the types package if needed.")
          echo "pr=$pr" >> $GITHUB_OUTPUT
      - name: Report PR Creation
        run: |
          echo ":rocket: *PR Created:* $PR" >> $GITHUB_STEP_SUMMARY
        env:
          PR: ${{ steps.open-types-pr.outputs.pr }} # the url of the PR
      - name: Checkout nulib/repodev_planning_and_docs
        uses: actions/checkout@v3
        with:
          path: "${{env.TMP_REPODEVDIR}}"
          repository: "nulib/repodev_planning_and_docs"
          token: ${{env.GH_TOKEN}}
      # intentionally run this step after checking out nulib/repodev_planning_and_docs
      # to ensure that the PR is created and assigned correctly
      - name: Get PR reviewer handle
        id: pr-reviewer
        run: |
          REVIEWER_LOGIN=$(gh pr view ${{ steps.open-types-pr.outputs.pr }} --json=reviewRequests --jq='.reviewRequests | map(select(.__typename == "User")) | .[0].login // empty')
          DEFAULT_REVIEWER="mathewjordan"
          if [[ -z "$REVIEWER_LOGIN" ]]; then
            echo "handle=$DEFAULT_REVIEWER" >> $GITHUB_OUTPUT
          else
            echo "handle=$REVIEWER_LOGIN" >> $GITHUB_OUTPUT
          fi
        shell: bash
      - name: Open issue in nulib/repodev_planning_and_docs
        working-directory: "${{env.TMP_REPODEVDIR}}"
        run: |
          gh issue create \
            -t "Update nulib/dcapi-types for API release v${{ steps.package-version.outputs.current-version}}" \
            -b "Review PR: ${{ steps.open-types-pr.outputs.pr}} and release nulib/dcapi-types if needed." \
            -a ${{ steps.pr-reviewer.outputs.handle }} \
            -l "digital collections" \
            -l "front end"
        shell: bash
